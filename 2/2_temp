// #include <iostream>
// #include <vector>
// #include <mpi.h>

// struct Ball
// {
//     int y; // Position
//     int d; // Direction
// };

// int main(int argc, char **argv)
// {
//     // Initialize the MPI environment
//     MPI_Init(&argc, &argv);

//     // Get the number of processes
//     int world_size;
//     MPI_Comm_size(MPI_COMM_WORLD, &world_size);

//     // Get the rank of the process
//     int world_rank;
//     MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);

//     // Define a new MPI datatype for the Ball struct
//     int blocklengths[2] = {1, 1};
//     MPI_Datatype types[2] = {MPI_INT, MPI_INT};
//     MPI_Aint offsets[2];
//     offsets[0] = offsetof(Ball, y);
//     offsets[1] = offsetof(Ball, d);

//     MPI_Datatype MPI_BALL;
//     MPI_Type_create_struct(2, blocklengths, offsets, types, &MPI_BALL);
//     MPI_Type_commit(&MPI_BALL);

//     int N, M, K, T;
//     std::vector<std::vector<Ball>> balls;

//     if (world_rank == 0)
//     {
//         // Root process reads the input
//         std::cin >> N >> M >> K >> T;

//         balls.resize(N);
//         for (int i = 0; i < K; i++)
//         {
//             int x, y, d;
//             char c;
//             std::cin >> x >> y >> c;
//             if (c == 'U')
//             {
//                 d = 0;
//             }
//             else if (c == 'R')
//             {
//                 d = 1;
//             }
//             else if (c == 'D')
//             {
//                 d = 2;
//             }
//             else
//             {
//                 d = 3;
//             }
//             balls[x].push_back({y, d}); // Use the Ball struct
//         }
//     }

//     // share the values of N, M, K, and T
//     MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);
//     MPI_Bcast(&M, 1, MPI_INT, 0, MPI_COMM_WORLD);
//     MPI_Bcast(&K, 1, MPI_INT, 0, MPI_COMM_WORLD);
//     MPI_Bcast(&T, 1, MPI_INT, 0, MPI_COMM_WORLD);

//     std::vector<std::vector<Ball>> my_balls(N);

//     // Clean up the custom datatype
//     MPI_Type_free(&MPI_BALL);

//     // Finalize the MPI environment
//     MPI_Finalize();

//     return 0;
// }
